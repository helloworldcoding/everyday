/**
 * 已知rand5能等概率产生1, 2, 3, 4, 5，
 *  现要用rand5来实现rand7（rand7的意思是要等概率产生1, 2, 3, 4, 5, 6, 7）
 */

 /**
  * 思路：我们看看rand5 + rand5 行不行。 rand5 + rand5 的结果是2, 3, 4, 5, 6, 7, 8, 9, 10, 
  * 稍微思考一下， 就知道， 这些数肯定不是等概率的， 比如2的概率要低于5的概率。 所以， 不靠谱。 
  * 我们再来看看， 既然有了1, 2, 3, 4, 5,  那很容易就有10, 20, 30, 40, 50, 且是等概率的。   
  * 假设现在又有另外一个fun函数， 能等概率随机生成0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 
  * 那么， 我们不就很轻易地构造了等概率的10, 11, 12, 13, ....., 59么？
  *  没错， 思路就是这样的。所以， 我们先要让rand5产生等概率的间距数组（比如上述的10, 20, 30, 40, 50,），
  *  然后让rand5产生连续的待插入数字（比如上述的0, 1, 2, ..., 9,）. 现在问题是， 要多大的间距才合适呢？
  *  其实也很简单， 要让0, 1, 2, 3, 4刚好能插入到间距数组中。
  *  第一步： 用rand5产生等概率的0, 1, 2, 3, 4，准备插入到下一步的等间距数组中, 使得插入后， 刚好合适。
  *  第二步： 用rand5产生等概率的0, 1, 2, 3, 4,  然后为了被插入， 将其散开成0, 5, 10, 15, 20.
  *  第三步： 将第一步插入 到第二步中， 于是， 就形成了0， 1， 2， 3， 4， 5， 6， 7， 8， ...， 20， 21， 22， 23， 24.  
  *  然后就很容易等概率地生成1, 2, 3, 4, 5, 6, 7了。 
  *  原文：https://blog.csdn.net/stpeace/article/details/46672035 
  */
 function rand7() {
     var x;
     while(1) {
         x = (rand5() - 1) * 5 + (rand5() - 1);
         if (x > 21) {
             continue;
         } else {
             return 1 + (x % 7);
         }
     }
 }